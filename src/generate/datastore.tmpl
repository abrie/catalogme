package datastore

import (
  "crypto/rand"
	"database/sql"
	"encoding/base64"
  "fmt"
	"log"
	_ "github.com/mattn/go-sqlite3"
)

type Datastore struct {
	DB *sql.DB}

func generateRandomBytes(n int) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return b, nil
}

func generateRandomString(s int) (string, error) {
	b, err := generateRandomBytes(s)
	return base64.URLEncoding.EncodeToString(b), err
}

func (datastore *Datastore) Ping() {
	err := datastore.DB.Ping()
	if err != nil {
		log.Println("Datastore failure.", err)
	}
}

func OpenDatastore(dbFile string) *Datastore {
	db, err := sql.Open("sqlite3", dbFile)
	if err != nil {
		log.Fatal(err)
	}

	return &Datastore{DB: db}
}

func (datastore *Datastore) Close() {
	datastore.DB.Close()
}

{{ range . }}
{{ template "QueryOne" . }}
{{ if .ForeignKey }}
{{ template "QueryList" . }}
{{ end }}
{{ template "UpdateOne" . }}
{{ template "CreateOne" . }}
{{ end }}

{{ define "QueryOne" }}
func (datastore *Datastore) Get{{.ObjType}}(id string) (*{{.ObjType}}, error) {
	var (
		obj {{.ObjType}}
	)

	err := datastore.DB.QueryRow("select {{.SelectFieldNames}} from {{.TableName}} where id=?", id).Scan({{.SelectFieldValues}})
  if err == sql.ErrNoRows {
    return nil, fmt.Errorf(`Found no row in '{{.TableName}}' with id='%s'`, id)
  }
	if err != nil {
    log.Fatal(err)
	}

	return &obj, nil
}
{{ end }}

{{ define "CreateOne" }}
func (datastore *Datastore) Create{{.ObjType}}(input *{{.ObjType}}Input) (*{{.ObjType}}, error) {
  stmt, err := datastore.DB.Prepare("insert into {{.TableName}}(id,{{.InsertFieldNames}}) values (?,{{.InsertFieldParams}})")

  if err != nil {
    log.Fatal(err)
  }

  id, err := generateRandomString(32)
  if err != nil {
    log.Fatal(err)
  }

  _, err = stmt.Exec(id, {{.InsertFieldValues}})
  if err != nil {
    log.Fatal(err)
  }

  return datastore.Get{{.ObjType}}(id)
}
{{ end }}

{{ define "UpdateOne" }}
func (datastore *Datastore) Update{{.ObjType}}(id string, input *{{.ObjType}}Input) (*{{.ObjType}}, error) {
  stmt, err := datastore.DB.Prepare("update {{.TableName}} set {{.UpdateFieldNames}} where id=?")
  if err != nil {
    log.Fatal(err)
  }

  result, err := stmt.Exec({{.UpdateFieldValues}}, id)
  if err != nil {
    log.Fatal(err)
  }

  count, err := result.RowsAffected()
  if err != nil {
    log.Fatal(err)
  }
  if count == 0 {
    return nil, fmt.Errorf(`Found no row to update in '{{.TableName}}' with id='%s'`, id)
  }

  log.Println(result.LastInsertId())

  return datastore.Get{{.ObjType}}(id)
}
{{ end }}

{{ define "QueryList" }}
func (datastore *Datastore) List_{{.ObjType}}(id *string) ([]*{{.ObjType}}, error) {
	var (
		list []*{{.ObjType}}
	)
	rows, err := datastore.DB.Query("select {{.SelectFieldNames}} from {{.TableName}} where {{.ForeignKey}}=?", *id)
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	for rows.Next() {
		obj := {{.ObjType}}{}
		err := rows.Scan({{.SelectFieldValues}})
		if err != nil {
			log.Fatal(err)
		}
		list = append(list, &obj)
	}
	err = rows.Err()
	if err != nil {
		log.Fatal(err)
	}

	return list, nil
}
{{ end }}
